import org.krohm.milleborne.engineimpl.MilleBorneGame;
import org.krohm.milleborne.engineimpl.context.*;
import org.krohm.milleborne.actions.internalactions.*;
import org.krohm.milleborne.actions.returnactions.*;
import org.krohm.milleborne.actions.useractions.*;
import org.krohm.milleborne.actions.*;
import org.krohm.milleborne.data.*;
import org.krohm.milleborne.util.*;
import org.slf4j.Logger;

####
#
# START STEP
#
####
rule "START_2_INIT"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep : currentStep == Steps.STEP_START)
      logger : Logger()
  then
       logger.error("Entering Rules");
       context.setCurrentStep(Steps.STEP_INIT);
       modify ( context ) {}
end

####
#
# INIT STEP
#
####Â¨

rule "INIT_2_STEP_USER_ACTION"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_INIT)
  then
       context.setCurrentStep(Steps.STEP_USER_ACTION);
       modify ( context ) {}
end

####
#
# USER_ACTION STEP
#
####

#
# Internal Step is used to avoid re-checking other rules of this step and recalculate Other
# Rules confitions
#
rule "STEP_USER_ACTION_2_INTERNAL"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_USER_ACTION)
      todoList : InternalActionQueue ();
  then
       context.setCurrentStep(Steps.InternalSteps.INTERNAL_STEP_USER_ACTION);
       modify ( todoList ) {}
       modify ( context ) {}

end

rule "STEP_USER_ACTION_2_STEP_ERROR"
      salience 1
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.InternalSteps.INTERNAL_STEP_USER_ACTION)
      todoList : InternalActionQueue (size < 1);
      logger : Logger();
    then
       context.setReturnAction(new InvalidAction());
       context.setCurrentStep(Steps.STEP_ERROR);
       modify ( context ) {}
end

rule "STEP_USER_ACTION_2_STEP_BEFORE_EXEC"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.InternalSteps.INTERNAL_STEP_USER_ACTION)
      todoList : InternalActionQueue (currentAction  : peek)
      logger : Logger();
then
       context.setCurrentStep(Steps.STEP_BEFORE_EXEC);
       logger.error("@@@@@@" + currentAction);
       modify ( context ) {}
end

####
#
# BEFORE_EXEC STEP
#
####


rule "STEP_BEFORE_EXEC_2_ERROR"
      salience 1
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_BEFORE_EXEC)
      todoList : InternalActionQueue (currentAction  : peek != null, status : peek.validationStatus )
      logger : Logger()
     # eval ( ((IInternalAction) currentAction).getValidationStatus()  == IInternalAction.STATUS_REJECTED)
      eval ((Integer) status  == IInternalAction.STATUS_REJECTED)
then
    #   Logger logger = DrlUtil.getLogger();
       logger.error("Action REJECTED: <" + currentAction +">");
       context.setCurrentStep(Steps.STEP_ERROR);
       modify ( context ) {}
end


rule "STEP_BEFORE_EXEC_2_STEP_EXEC"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_BEFORE_EXEC)
  then
       context.setCurrentStep(Steps.STEP_EXEC);
       modify ( context ) {}
end


####
#
# EXEC STEP
#
####

rule "STEP_EXEC_2_INTERNAL"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_EXEC)
      todoList : InternalActionQueue ()
      gameData : MilleBorneGame()
  then
       IInternalAction currentAction = todoList.peek();
       Logger logger = DrlUtil.getLogger();
       logger.error("Executing Action : <" + currentAction +">");
       currentAction.execute(gameData,todoList);
       context.setCurrentStep(Steps.InternalSteps.INTERNAL_STEP_EXEC);
       modify ( context ) {}
end


rule "STEP_EXEC_2_STEP_AFTER_EXEC"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.InternalSteps.INTERNAL_STEP_EXEC)
  then
       context.setCurrentStep(Steps.STEP_AFTER_EXEC);
       modify ( context ) {}
end

####
#
# AFTER_EXEC STEP
#
####

rule "AFTER_EXEC_2_INTERNAL"
      salience 0
      dialect "java"
  when
       context : ExecutionContext (currentStep == Steps.STEP_AFTER_EXEC)
       todoList : InternalActionQueue ()
  then
       IInternalAction currentAction = todoList.poll();
       Logger logger = DrlUtil.getLogger();
       logger.error("Removing Action : <" + currentAction +">");
       context.setCurrentStep(Steps.InternalSteps.INTERNAL_STEP_AFTER_EXEC);
       modify ( context ) {}
end

rule "STEP_EXEC_2_STEP_BEFORE_EXEC_LOOP"
      salience 1
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.InternalSteps.INTERNAL_STEP_AFTER_EXEC)
      todoList : InternalActionQueue ()
      eval (todoList.size() > 0)
  then
       context.setCurrentStep(Steps.STEP_BEFORE_EXEC);
       modify ( context ) {}
end

rule "STEP_AFTER_EXEC_2_STEP_END"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.InternalSteps.INTERNAL_STEP_AFTER_EXEC)
  then
       context.setCurrentStep(Steps.STEP_END);
       modify ( context ) {}
end

####
#
# END STEP
#
####

# No Rules for END STEP  : this is the end

####
#
# ERROR STEP
#
####

# Replaces any non-error ReturnAction (including null) by default Error Action
rule "UNKNOWN_ERROR"
      salience 0
      dialect "java"
  when
      context : ExecutionContext (currentStep == Steps.STEP_ERROR, returnAction : returnAction)
      eval (! ( returnAction instanceof ErrorReturnAction))
  then
       context.setReturnAction(new UnknownErrorAction());
       modify ( context ) {}
end

